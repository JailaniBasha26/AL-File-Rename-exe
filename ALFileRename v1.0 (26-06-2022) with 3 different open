import time
from turtle import textinput
import os
import os.path
from os import path
from tkinter import *
from tkinter.ttk import *
from tkinter import ttk
from tkinter import filedialog
from tkinter import messagebox
from tkinter.messagebox import askokcancel, showinfo, WARNING
import tkinter as tk
import linecache
import re
import ctypes
import shlex, subprocess
import base64
import sys

root = tk.Tk()
root.withdraw()
root.attributes('-topmost', True)
root.title('AL File Rename')

root.geometry('330x80+320+150')
if len(sys.argv)==2:
    open_file = sys.argv[1]
else:
    open_file = os.getcwd()
    if open_file+'\ALFileRename v1.0.exe' == sys.argv[0]:
        open_file = filedialog.askdirectory()

line=''
aleastOneValidFile=False
fileNames_list=''

if open_file != '':
    if path.exists(open_file):
      dir_list = os.listdir(open_file)
    else:
        ctypes.windll.user32.MessageBoxW(0,
                                         "Invalid File Path! : "+open_file,
                                         "Info")
        print("Invalid File Path: "+open_file)
        sys.exit()

else:
    os._exit(0)

def cancel():
    os._exit(0)

def start():
    GB = len(dir_list)
    download = 0
    speed = 1
    while (download < GB):
        for folderName in dir_list:
            time.sleep(0.05)
            bar['value'] += (speed / GB) * 100
            download += speed
            percent.set(str(int((download / GB) * 100)) + "%")
            text.set(str(download) + "/" + str(GB) + " GB completed")
            window.update_idletasks()
            window.update()

            if folderName.endswith('.al'):
                fileNames_list = [folderName]
                isFolder=False
            else:
                fileNames_list = os.listdir(open_file+'//'+folderName)
                isFolder=True
            for oldName in fileNames_list:
                if isFolder:
                    os.chdir(open_file + '/' + folderName)
                    a_file = open(open_file + '/' + folderName + '/' + oldName, "r")
                else:
                    os.chdir(open_file)
                    a_file = open(open_file + '/' + oldName, "r")

                # NEW LOGIC - START
                for number, line in enumerate(a_file):
                    aleastOneValidFile=True
                    lineBeforeCap=line
                    line = line.upper()
                    splitted_first_line=line.split(' ')
                    if len(splitted_first_line) >1 and splitted_first_line[1].isdecimal() :
                        curr_objectType=splitted_first_line[0]
                        if line.__contains__(" EXTENDS "):
                            curr_objectName = lineBeforeCap.split('extends') or lineBeforeCap.split('EXTENDS');
                            if curr_objectName[0].__contains__('"'):
                                curr_objectName = curr_objectName[0].split('"')
                                curr_objectName = curr_objectName[1].replace(' ','')
                                curr_objectName = ''.join(char for char in curr_objectName if char.isalnum())
                            else:
                                curr_objectName = curr_objectName[0].split(' ')
                                curr_objectName= curr_objectName[2]
                                curr_objectName = curr_objectName[3].replace('"','').replace(' ','')
                                curr_objectName = ''.join(char for char in curr_objectName if char.isalnum())
                        else:
                            if lineBeforeCap.__contains__('"'):
                                curr_objectName= lineBeforeCap.split('"')[1].replace(' ','')
                                curr_objectName = ''.join(char for char in curr_objectName if char.isalnum())
                            else:
                                curr_objectName=lineBeforeCap.split(' ')[2]
                                curr_objectName = ''.join(char for char in curr_objectName if char.isalnum())

                        if curr_objectType.upper() == "PAGEEXTENSION":
                            curr_objectType = 'Page_Ext'
                        if curr_objectType.upper() == "TABLEEXTENSION":
                            curr_objectType = 'Table_Ext'
                        if curr_objectType.upper() == "REPORTEXTENSION":
                            curr_objectType = 'Report_Ext'
                        curr_objectType = curr_objectType.capitalize().replace('_ext', 'Ext')

                        a_file.close()
                        gitRename = "git mv *#$.\\" + oldName + "*#$ .\\" + curr_objectName + "." + curr_objectType + ".al"
                        gitRename = gitRename.replace('*#$','"')
                        if oldName!=curr_objectName + "." + curr_objectType + ".al" :
                            if isFolder:
                                gitStatus= "git status *#$"+open_file+"/"+folderName+"/"+oldName+'"'
                                gitStatus = gitStatus.replace('*#$', '"')
                                output = subprocess.check_output(gitStatus,
                                                        shell=True)
                            else:
                                gitStatus = "git status *#$" + open_file + "/" + oldName + '"'
                                gitStatus = gitStatus.replace('*#$', '"')
                                output = subprocess.check_output(gitStatus,
                                    shell=True)

                            if str(output).__contains__('Untracked files'):
                                src = ".\\" + oldName
                                desc = ".\\" + curr_objectName + "." + curr_objectType + ".al"
                                os.rename(src, desc)
                            else:
                                si = subprocess.STARTUPINFO()
                                si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                                subprocess.call(gitRename, startupinfo=si)
                        break;
                        # NEW LOGIC - END
    else:
        if aleastOneValidFile:
            ctypes.windll.user32.MessageBoxW(0,
                                            "All Files have been successfully renamed in GIT using 'git mv'. \nCheck the Staged changes to see the renamed files. \nThank you for using RebelSkool's AL File Rename App.",
                                            "Info")
            print("All Files have been successfully renamed")
        else:
            ctypes.windll.user32.MessageBoxW(0,
                                             "No AL Files found for renaming. Please choose the Source folder containing the AL files!",
                                              "Info")
            print("No AL Files found for renaming")
        sys.exit()



# LOADING - START
window = Tk()
window.title('AL File Rename')
window.geometry('300x50+600+370')
# window.geometry('400x250+1000+300')
percent = StringVar()
text = StringVar()

def disable_event():
   pass

window.protocol("WM_DELETE_WINDOW", disable_event)
window.wm_attributes('-toolwindow', 'True')

bar = Progressbar(window,orient=HORIZONTAL,length=280)
bar.pack(pady=8)

# percentLabel = Label(window,textvariable=percent).pack(pady=10)
# taskLabel = Label(window,textvariable=text).pack(pady=10)

# start();

# button = Button(window,text="Rename Files in GIT",command=start).pack()
# button = Button(window,text="Cancel",command=cancel).pack(pady=2)

# print(str(button))


# if not validFolderPresent:
#     ctypes.windll.user32.MessageBoxW(0,
#                                      "No AL Files found for renaming. Please choose the Source folder containing the AL files!",
#                                      "Info")
# else:
start()
sys.exit()
# ctypes.windll.user32.MessageBoxW(0, "File Renaming is Successfully Completed By RebelSkool App","HOORAY!!!")


